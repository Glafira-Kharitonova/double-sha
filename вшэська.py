import telebot
from telebot import types
from datetime import datetime, timedelta
import json
import os
import pandas as pd
import threading
import time

bot = telebot.TeleBot('8179560224:AAF6aFKzEp6zJN1s31whhtHB-ABgKDzzv_E')

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_group_choice = {} 
user_deadlines = {}
user_states = {}

# –§–∞–π–ª—ã
DEADLINES_FILE = 'files/deadlines.json'
LECTURER_INFO_FILE = 'files/lecturer_info.xlsx'
NAME_GROUP_FILE = 'eng timetable files/names_groups.xlsx'  # –ü–µ—Ä–≤—ã–π Excel —Ñ–∞–π–ª —Å –∏–º–µ–Ω–∞–º–∏ –∏ –≥—Ä—É–ø–ø–∞–º–∏
GROUP_INFO_FILE = 'eng timetable files/group_info.xlsx'    # –í—Ç–æ—Ä–æ–π Excel —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º
SCHEDULE_DAY_FILE_TEMPLATE = 'timetables/day/day_timetable_{}.json'  # –®–∞–±–ª–æ–Ω –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_deadlines():
    global user_deadlines
    if os.path.exists(DEADLINES_FILE):
        try:
            with open(DEADLINES_FILE, 'r', encoding='utf-8') as f:
                content = f.read().strip()
                if content:
                    user_deadlines = json.loads(content)
                else:
                    user_deadlines = {}
        except json.JSONDecodeError:
            user_deadlines = {}
            save_deadlines()
    else:
        user_deadlines = {}
        save_deadlines()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–æ–≤ –≤ —Ñ–∞–π–ª
def save_deadlines():
    with open(DEADLINES_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_deadlines, f, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤
def check_and_remove_expired_deadlines():
    current_date = datetime.now().date()
    for chat_id, deadlines in user_deadlines.items():
        expired_deadlines = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–¥–ª–∞–π–Ω
        for deadline in deadlines:
            deadline_date = datetime.strptime(deadline['date'], '%d.%m.%Y').date()
            
            if deadline_date < current_date:
                expired_deadlines.append(deadline)
        
        if expired_deadlines:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã
            user_deadlines[chat_id] = [d for d in deadlines if d not in expired_deadlines]
            save_deadlines()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            expired_names = ', '.join([d['name'] for d in expired_deadlines])
            bot.send_message(chat_id, f"–ò—Å—Ç–µ–∫—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã —É–¥–∞–ª–µ–Ω—ã: {expired_names}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
load_deadlines()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def send_reminders():
    while True:
        now = datetime.now()
        for chat_id, deadlines in user_deadlines.items():
            for deadline in deadlines:
                deadline_date = datetime.strptime(deadline['date'], '%d.%m.%Y').date()
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                reminder_dates = [
                    deadline_date - timedelta(weeks=1),  # –∑–∞ –Ω–µ–¥–µ–ª—é
                    deadline_date - timedelta(days=3),    # –∑–∞ 3 –¥–Ω—è
                    deadline_date - timedelta(days=1),    # –∑–∞ –¥–µ–Ω—å
                    deadline_date                          # –≤ –¥–µ–Ω—å –¥–µ–¥–ª–∞–π–Ω–∞
                ]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                for reminder_date in reminder_dates:
                    if now.date() == reminder_date:
                        bot.send_message(chat_id, f"‚ùóÔ∏è–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –î–µ–¥–ª–∞–π–Ω '{deadline['name']}' –Ω–∞—Å—Ç—É–ø–∞–µ—Ç {deadline['date']}!")

        
        time.sleep(86400)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ —Å—É—Ç–∫–∏

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminder_thread = threading.Thread(target=send_reminders, daemon=True)
reminder_thread.start()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å—Ç–µ–∫—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
check_and_remove_expired_deadlines()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ –§–ò–û
def get_group_by_fio(fio):
    df_names_groups = pd.read_excel(NAME_GROUP_FILE, header=None)
    # –ò—â–µ–º –§–ò–û –≤ —Å—Ç–æ–ª–±—Ü–µ B (–∏–Ω–¥–µ–∫—Å 1) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ D (–∏–Ω–¥–µ–∫—Å 3)
    group_row = df_names_groups[df_names_groups[1].str.contains(fio, na=False)]
    if not group_row.empty:
        return group_row[3].values[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
def get_group_info(group):
    df_group_info = pd.read_excel(GROUP_INFO_FILE, header=None)
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≥—Ä—É–ø–ø–µ –≤ —Å—Ç–æ–ª–±—Ü–µ B (–∏–Ω–¥–µ–∫—Å 1)
    group_info = df_group_info[df_group_info[1].str.contains(group, na=False)]
    return group_info

def get_day_name_en(date):
    days_en = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
    return days_en[date.weekday()]

def get_day_name_ru(date):
    days_ru = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    return days_ru[date.weekday()]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def send_schedule_options(chat_id, group):
    markup = types.InlineKeyboardMarkup()
    button_week = types.InlineKeyboardButton("–ù–∞ –Ω–µ–¥–µ–ª—é", callback_data=f'week_timetable_{group}')
    button_today = types.InlineKeyboardButton("–ù–∞ –¥–µ–Ω—å", callback_data=f'today_timetable_{group}')
    markup.add(button_week, button_today)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_message(message):
    with open('files/start_message.txt', 'r', encoding='utf-8') as file:
        answer = file.read()
    if message.text == "/start":
        bot.send_message(message.chat.id, answer)

input_day = None

# –ö–æ–º–∞–Ω–¥–∞ /timetable
@bot.message_handler(commands=['timetable'])
def timetable_message(message):
    chat_id = message.chat.id

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("24–ö–ù–¢-4", callback_data='group_4')
    button2 = types.InlineKeyboardButton("24–ö–ù–¢-5", callback_data='group_5')
    button3 = types.InlineKeyboardButton("24–ö–ù–¢-6", callback_data='group_6')
    markup.add(button1, button2, button3)

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É.", reply_markup=markup)

        
# –ö–æ–º–∞–Ω–¥–∞ /deadline
@bot.message_handler(commands=['deadline'])
def deadline_command(message):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–æ–≤
    markup = types.InlineKeyboardMarkup()
    button_add = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data='deadline_add_deadline')
    button_view = types.InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã", callback_data='deadline_view_deadlines')
    markup.add(button_add, button_view)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–æ–≤
    bot.send_message(message.chat.id, "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ /lecturer
@bot.message_handler(commands=['lecturer'])
def lecturer_command(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ c/c++').")
    user_states[chat_id] = 'awaiting_subject_name'

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'awaiting_subject_name')
def handle_subject_input(message):
    chat_id = message.chat.id
    subject_input = message.text.strip().lower()
    user_states.pop(chat_id, None)

    try:
        df = pd.read_excel(LECTURER_INFO_FILE, header=None)
        
        subject_data = df[df[0].str.lower().str.contains(subject_input, na=False)]

        lecturers_info = []
        formulas_info = []
        modules_info_set = set() 

        if not subject_data.empty:
            course_name = subject_data[0].iloc[0]

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–∫–∏
            for _, row in subject_data.iterrows():
                lecturer = row[1] if not pd.isna(row[1]) else None
                email = row[2] if not pd.isna(row[2]) else None
                modules = row[3] if not pd.isna(row[3]) else None
                formula = row[4] if not pd.isna(row[4]) else None

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ –∏ –ø–æ—á—Ç–µ
                if lecturer:
                    lecturer_info = f"üìö –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lecturer}"
                    if email:
                        lecturer_info += f"\n‚úâÔ∏è –ü–æ—á—Ç–∞: {email}"
                    else:
                        lecturer_info += "\n‚úâÔ∏è –ü–æ—á—Ç–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    lecturers_info.append(lecturer_info + "\n")

                if formula:
                    formulas_info.append(f"üìê {formula}")

                if modules:
                    modules_info_set.add(modules)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ '{course_name}':\n\n"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö
            if lecturers_info:
                response += "\n".join(lecturers_info) + "\n"
            else:
                response += "üìö –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"

            if formulas_info:
                response += "\n".join(formulas_info) + "\n\n"
            else:
                response += "üìê –§–æ—Ä–º—É–ª–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"

            if modules_info_set:
                response += "üìÜ –ú–æ–¥—É–ª–∏ —Å —ç–∫–∑–∞–º–µ–Ω–∞–º–∏: " + ", ".join(modules_info_set)
            else:
                response += "üìÜ –ú–æ–¥—É–ª–∏ —Å —ç–∫–∑–∞–º–µ–Ω–∞–º–∏: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

            bot.send_message(chat_id, response)
        else:
            bot.send_message(chat_id, f"–ü—Ä–µ–¥–º–µ—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π '{subject_input}', –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        print(f"Error while reading lecturer data: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) in ['awaiting_day', 'awaiting_specific_day'])
def handle_day_input(message):
    global input_day
    chat_id = message.chat.id
    input_day = message.text.strip().lower()
    user_states.pop(chat_id, None)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    valid_days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    if input_day not in valid_days:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å.")
        return

    group = user_group_choice.get(chat_id)
    schedule_file = SCHEDULE_DAY_FILE_TEMPLATE.format(group)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è "—á–µ—Ç–≤–µ—Ä–≥" –∏ "—Å—É–±–±–æ—Ç–∞" - –¥–Ω–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    if input_day in ["—á–µ—Ç–≤–µ—Ä–≥", "—Å—É–±–±–æ—Ç–∞"]:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")
        user_states[chat_id] = 'awaiting_name'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –§–ò–û
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π –≤—ã–≤–æ–¥–∏–º –æ–±—ã—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        try:
            with open(schedule_file, 'r', encoding='utf-8') as f:
                schedule = json.load(f)

            response_day = f'{input_day[:-1]}—É' if input_day in ['–ø—è—Ç–Ω–∏—Ü–∞', '—Å—Ä–µ–¥–∞'] else input_day
            lessons = schedule['schedule'].get(input_day, [])
            
            if lessons:
                response = f"‚úèÔ∏è _–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {response_day} –¥–ª—è –≥—Ä—É–ø–ø—ã {group}_: ‚úèÔ∏è\n\n"
                for lesson in lessons:
                    response += f"*{lesson['subject']}*\n"
                    response += f"\u200B    ‚Ä¢    *{lesson['time']}* - {lesson['lesson_type']}\n"
                    response += f"\u200B          *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:* _{lesson['lecturer']}_\n"
                    response += f"\u200B          *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* _{lesson['room']}_\n"
                    if 'dates' in lesson and lesson['dates']:
                        response += f"\u200B          *–î–∞—Ç—ã:* {', '.join(lesson['dates'])}\n"

                    response += f"\n"

                bot.send_message(chat_id, response.strip(), parse_mode='Markdown')
            else:
                bot.send_message(chat_id, f"–ù–∞ {response_day} –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π.")
        except Exception as e:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'awaiting_name')
def handle_name_input(message):
    global input_day
    chat_id = message.chat.id
    full_name = message.text.strip()
    response_day = f'{input_day[:-1]}—É' if input_day in ['–ø—è—Ç–Ω–∏—Ü–∞', '—Å—Ä–µ–¥–∞'] else input_day
    user_states.pop(chat_id, None)

    try:
        name_group_df = pd.read_excel(NAME_GROUP_FILE, header=None)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –§–ò–û –≤ —Å—Ç–æ–ª–±—Ü–µ —Å –∏–º–µ–Ω–∞–º–∏ (B)
        group_row = name_group_df[name_group_df[1].str.contains(full_name, na=False)]
        if not group_row.empty:
            group_number = group_row.iloc[0][3]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏ (D)

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –Ω–∞ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å (—á–µ—Ç–≤–µ—Ä–≥ –∏–ª–∏ —Å—É–±–±–æ—Ç–∞)
            try:
                group_info_df = pd.read_excel(GROUP_INFO_FILE, sheet_name=input_day, header=None)
                group_info_rows = group_info_df[group_info_df[1] == group_number]

                if not group_info_rows.empty:
                    response_lines = [f"‚úèÔ∏è _–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_number}_: ‚úèÔ∏è\n"]
                    for _, row in group_info_rows.iterrows():
                        time = row[0]  # –í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è
                        audience_number = f"{int(row[2]):03}"  # –ù–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                        building = row[3]  # –ö–æ—Ä–ø—É—Å
                        teacher = row[4]  # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ E

                        response_lines.append(f"\u200B    ‚Ä¢    *–í—Ä–µ–º—è:* _{time}_")
                        response_lines.append(f"\u200B          *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:* _{teacher}_")
                        response_lines.append(f"\u200B          *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* _{audience_number}_ - _{building}_\n")
                
                    response = "\n".join(response_lines)
                    bot.send_message(chat_id, response, parse_mode='Markdown')
                else:
                    bot.send_message(chat_id, f"–£ –≥—Ä—É–ø–ø—ã {group_number} –≤ {response_day} –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É.")
            except Exception as e:
                bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É.")
        else:
            bot.send_message(chat_id, "–§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã –ø–æ –§–ò–û.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    global input_day
    data = call.data
    chat_id = call.message.chat.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    if data.startswith('group_'):
        group = data.split('_')[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
        user_group_choice[chat_id] = group  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É

        bot.answer_callback_query(call.id, f"–¢–≤–æ—è –≥—Ä—É–ø–ø–∞ 24–ö–ù–¢-{group}.")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        send_schedule_options(chat_id, group)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é
    elif data.startswith('week_timetable_'):
        group = user_group_choice.get(chat_id)
        filename = f'timetables/week/week_timetable_{group}.jpg'  # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

        try:
            with open(filename, 'rb') as image:
                text = f"–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –≥—Ä—É–ø–ø—ã 24–ö–ù–¢-{group}."
                bot.send_message(chat_id, text)
                bot.send_photo(chat_id, image)
        except FileNotFoundError:
            bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏, —Ç–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–æ.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
    elif data.startswith('today_timetable_'):
        group = user_group_choice.get(chat_id)

        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫):")
        user_states[chat_id] = 'awaiting_day'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        bot.answer_callback_query(call.id)
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤
    elif data.startswith('deadline_'):
        if data == 'deadline_add_deadline':
            user_states[chat_id] = 'awaiting_deadline_name'
            bot.send_message(chat_id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞:")

        elif data == 'deadline_view_deadlines':
            deadlines = user_deadlines.get(str(chat_id), [])
            if not deadlines:
                bot.send_message(chat_id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤.")
            else:
                response = "üìã *–¢–≤–æ–∏ –¥–µ–¥–ª–∞–π–Ω—ã:*\n"
                markup = types.InlineKeyboardMarkup()
                for idx, deadline in enumerate(deadlines, 1):
                    response += f"{idx}. *{deadline['name']}* - {deadline['date']}\n"
                    edit_button = types.InlineKeyboardButton(f"‚úè –ò–∑–º–µ–Ω–∏—Ç—å {idx}", callback_data=f'deadline_edit_{idx-1}_name')
                    delete_button = types.InlineKeyboardButton(f"üóë –£–¥–∞–ª–∏—Ç—å {idx}", callback_data=f'deadline_delete_{idx-1}')
                    markup.add(edit_button, delete_button)
                bot.send_message(chat_id, response, parse_mode='Markdown', reply_markup=markup)

        elif data.startswith('deadline_edit_'):
            try:
                parts = data.split('_')
                idx = int(parts[2])
                if len(parts) > 3 and parts[3] == 'name':
                    user_states[chat_id] = f'editing_deadline_{idx}_name'
                    bot.send_message(chat_id, f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ #{idx+1}:")
                else:
                    bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
            except ValueError:
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        
        elif data.startswith('deadline_delete_'):
            try:
                idx = int(data.split('_')[-1])
                deadlines = user_deadlines.get(str(chat_id), [])
                if 0 <= idx < len(deadlines):
                    deleted = deadlines.pop(idx)
                    user_deadlines[str(chat_id)] = deadlines
                    save_deadlines()
                    bot.send_message(chat_id, f"‚úÖ –î–µ–¥–ª–∞–π–Ω *'{deleted['name']}'* —É–¥–∞–ª—ë–Ω.", parse_mode='Markdown')
                else:
                    bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–µ–¥–ª–∞–π–Ω–∞.")
            except ValueError:
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")

    bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞
@bot.message_handler(func=lambda message: True)
def handle_deadline_input(message):
    chat_id = message.chat.id
    state = user_states.get(chat_id, '')

    if state == 'awaiting_deadline_name':
        deadline_name = message.text.strip()
        if not deadline_name:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ–º –¥–∞—Ç—É
        user_deadlines.setdefault(str(chat_id), []).append({'name': deadline_name, 'date': ''})
        user_states[chat_id] = 'awaiting_deadline_date'
        bot.send_message(chat_id, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–µ–Ω—å.–ú–µ—Å—è—Ü.–ì–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2024):")
    
    elif state == 'awaiting_deadline_date':
        deadline_date_input = message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        try:
            deadline_date = datetime.strptime(message.text, '%d.%m.%Y').date()
            deadline_date_str = deadline_date.strftime('%d.%m.%Y')

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ—Å—Ç—å
            if deadline_date < datetime.now().date():
                bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
                return
        except ValueError:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–µ–Ω—å.–ú–µ—Å—è—Ü.–ì–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2024):")
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω
        deadlines = user_deadlines.get(str(chat_id), [])
        if deadlines and deadlines[-1]['date'] == '':
            deadlines[-1]['date'] = deadline_date_str
            user_deadlines[str(chat_id)] = deadlines
            save_deadlines()
            bot.send_message(chat_id, f"‚úÖ –î–µ–¥–ª–∞–π–Ω *'{deadlines[-1]['name']}'* —Å –¥–∞—Ç–æ–π *{deadline_date_str}* –¥–æ–±–∞–≤–ª–µ–Ω.", parse_mode='Markdown')
            user_states.pop(chat_id, None)
        else:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞.")
            user_states.pop(chat_id, None)
    
    elif state.startswith('editing_deadline_'):
        try:
            parts = state.split('_')
            if len(parts) == 4 and parts[2].isdigit() and parts[3] == 'name':
                idx = int(parts[2])
                new_name = message.text.strip()
                if not new_name:
                    bot.send_message(chat_id, "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
                    return
                deadlines = user_deadlines.get(str(chat_id), [])
                if 0 <= idx < len(deadlines):
                    old_name = deadlines[idx]['name']
                    deadlines[idx]['name'] = new_name
                    user_deadlines[str(chat_id)] = deadlines
                    bot.send_message(chat_id, f"‚úÖ –î–µ–¥–ª–∞–π–Ω #{idx+1} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω —Å *'{old_name}'* –Ω–∞ *'{new_name}'*.", parse_mode='Markdown')
                    user_states[chat_id] = f'editing_deadline_{idx}_date'
                    bot.send_message(chat_id, f"–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ #{idx+1} –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–µ–Ω—å.–ú–µ—Å—è—Ü.–ì–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2024):")
                else:
                    bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–µ–¥–ª–∞–π–Ω–∞.")

            elif len(parts) == 4 and parts[2].isdigit() and parts[3] == 'date':
                idx = int(parts[2])
                new_date_input = message.text.strip()
                try:
                    new_date = datetime.strptime(new_date_input, '%d.%m.%Y').date()
                    new_date_str = new_date.strftime('%d.%m.%Y')
                except ValueError:
                    bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–µ–Ω—å.–ú–µ—Å—è—Ü.–ì–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2024):")
                    return
                deadlines = user_deadlines.get(str(chat_id), [])
                if 0 <= idx < len(deadlines):
                    old_date = deadlines[idx]['date']
                    deadlines[idx]['date'] = new_date_str
                    user_deadlines[str(chat_id)] = deadlines
                    save_deadlines()
                    bot.send_message(chat_id, f"‚úÖ –î–µ–¥–ª–∞–π–Ω #{idx+1} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω:\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* {deadlines[idx]['name']}\n*–î–∞—Ç–∞:* {new_date_str}", parse_mode='Markdown')
                else:
                    bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–µ–¥–ª–∞–π–Ω–∞.")

                user_states.pop(chat_id, None)
            else:
                bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
        except Exception as e:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
            user_states.pop(chat_id, None)
        except ValueError:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
            user_states.pop(chat_id, None)
    
bot.infinity_polling() 