import telebot
from telebot import types
from datetime import datetime, timedelta
import json
import os
import pandas as pd
import threading
import time

bot = telebot.TeleBot('8179560224:AAF6aFKzEp6zJN1s31whhtHB-ABgKDzzv_E')

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_group_choice = {} 
user_deadlines = {}
user_states = {}

# –§–∞–π–ª—ã
DEADLINES_FILE = 'files/deadlines.json'
NAME_GROUP_FILE = 'eng timetable files/names_groups.xlsx'  # –ü–µ—Ä–≤—ã–π Excel —Ñ–∞–π–ª —Å –∏–º–µ–Ω–∞–º–∏ –∏ –≥—Ä—É–ø–ø–∞–º–∏
GROUP_INFO_FILE = 'eng timetable files/group_info.xlsx'    # –í—Ç–æ—Ä–æ–π Excel —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_deadlines():
    global user_deadlines
    if os.path.exists(DEADLINES_FILE):
        try:
            with open(DEADLINES_FILE, 'r', encoding='utf-8') as f:
                content = f.read().strip()
                if content:
                    user_deadlines = json.loads(content)
                else:
                    user_deadlines = {}
        except json.JSONDecodeError:
            user_deadlines = {}
            save_deadlines()
    else:
        user_deadlines = {}
        save_deadlines()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–æ–≤ –≤ —Ñ–∞–π–ª
def save_deadlines():
    with open(DEADLINES_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_deadlines, f, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
load_deadlines()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def send_reminders():
    while True:
        now = datetime.now()
        for chat_id, deadlines in user_deadlines.items():
            for deadline in deadlines:
                deadline_date = datetime.strptime(deadline['date'], '%d.%m.%Y').date()
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                reminder_dates = [
                    deadline_date - timedelta(weeks=1),  # –∑–∞ –Ω–µ–¥–µ–ª—é
                    deadline_date - timedelta(days=3),    # –∑–∞ 3 –¥–Ω—è
                    deadline_date - timedelta(days=1),    # –∑–∞ –¥–µ–Ω—å
                    deadline_date                          # –≤ –¥–µ–Ω—å –¥–µ–¥–ª–∞–π–Ω–∞
                ]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                for reminder_date in reminder_dates:
                    if now.date() == reminder_date:
                        bot.send_message(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –î–µ–¥–ª–∞–π–Ω '{deadline['name']}' –Ω–∞—Å—Ç—É–ø–∞–µ—Ç {deadline['date']}!")

        
        time.sleep(86400)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ —Å—É—Ç–∫–∏

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminder_thread = threading.Thread(target=send_reminders, daemon=True)
reminder_thread.start()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ –§–ò–û
def get_group_by_fio(fio):
    df_names_groups = pd.read_excel(NAME_GROUP_FILE, header=None)
    # –ò—â–µ–º –§–ò–û –≤ —Å—Ç–æ–ª–±—Ü–µ B (–∏–Ω–¥–µ–∫—Å 1) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ D (–∏–Ω–¥–µ–∫—Å 3)
    group_row = df_names_groups[df_names_groups[1].str.contains(fio, na=False)]
    if not group_row.empty:
        return group_row[3].values[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
def get_group_info(group):
    df_group_info = pd.read_excel(GROUP_INFO_FILE, header=None)
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≥—Ä—É–ø–ø–µ –≤ —Å—Ç–æ–ª–±—Ü–µ B (–∏–Ω–¥–µ–∫—Å 1)
    group_info = df_group_info[df_group_info[1].str.contains(group, na=False)]
    return group_info

def get_day_name_en(date):
    days_en = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
    return days_en[date.weekday()]

def get_day_name_ru(date):
    days_ru = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    return days_ru[date.weekday()]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def send_schedule_options(chat_id, group):
    markup = types.InlineKeyboardMarkup()
    button_week = types.InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data=f'week_timetable_{group}')
    button_today = types.InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=f'today_timetable_{group}')
    button_tomorrow = types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data=f'tomorrow_timetable_{group}')
    markup.add(button_week, button_today, button_tomorrow)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_message(message):
    with open('files/start_message.txt', 'r', encoding='utf-8') as file:
        answer = file.read()
    if message.text == "/start":
        bot.send_message(message.chat.id, answer)

# –ö–æ–º–∞–Ω–¥–∞ /timetable
@bot.message_handler(commands=['timetable'])
def timetable_message(message):
    today = datetime.now().weekday()  # 0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    chat_id = message.chat.id

    if today == 6:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        bot.send_message(chat_id, "–£—Ä–∞! –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π.")
        return

    #–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if today not in [3, 5]:
        group = user_group_choice.get(chat_id)

        if not group:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("24–ö–ù–¢-4", callback_data='group_4')
            button2 = types.InlineKeyboardButton("24–ö–ù–¢-5", callback_data='group_5')
            button3 = types.InlineKeyboardButton("24–ö–ù–¢-6", callback_data='group_6')
            markup.add(button1, button2, button3)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É.", reply_markup=markup)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            send_schedule_options(chat_id, group)
    else:
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É
        user_states[chat_id] = 'awaiting_name'
        bot.send_message(chat_id, "–°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ) (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")
        
# –ö–æ–º–∞–Ω–¥–∞ /deadline
@bot.message_handler(commands=['deadline'])
def deadline_command(message):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–æ–≤
    markup = types.InlineKeyboardMarkup()
    button_add = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data='deadline_add_deadline')
    button_view = types.InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã", callback_data='deadline_view_deadlines')
    markup.add(button_add, button_view)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–æ–≤
    bot.send_message(message.chat.id, "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'awaiting_name')
def handle_name_input(message):
    chat_id = message.chat.id
    full_name = message.text.strip()

    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏–º–µ–Ω–∞–º–∏ –∏ –≥—Ä—É–ø–ø–∞–º–∏
    name_group_df = pd.read_excel(NAME_GROUP_FILE, header=None)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –§–ò–û –≤ —Å—Ç–æ–ª–±—Ü–µ B
    if full_name in name_group_df[1].values:
        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
        group_row = name_group_df[name_group_df[1] == full_name]
        group_number = group_row.iloc[0][3]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ D

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç
        today = datetime.now().weekday()
        sheet_name = '–ß–µ—Ç–≤–µ—Ä–≥' if today == 3 else '–°—É–±–±–æ—Ç–∞'  # 3 - —á–µ—Ç–≤–µ—Ä–≥, 5 - —Å—É–±–±–æ—Ç–∞

        # –ß—Ç–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –≥—Ä—É–ø–ø–∞–º
        try:
            group_info_df = pd.read_excel(GROUP_INFO_FILE, sheet_name=sheet_name, header=None)
        except ValueError as e:
            bot.send_message(chat_id, "–ü–æ—Ö–æ–∂–µ —Ñ–∞–π–ª —Å —Ç–≤–æ–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return

        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä—É –≥—Ä—É–ø–ø—ã
        group_info_rows = group_info_df[group_info_df[1] == group_number]

        if not group_info_rows.empty:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
            response_lines = []
            for _, row in group_info_rows.iterrows():
                time = str(row[0])  # –í—Ä–µ–º—è
                audience_number = str(int(row[2])) if len(str(int(row[2]))) == 3 else '0' + str(int(row[2])) # –ê—É–¥–∏—Ç–æ—Ä–∏—è
                building = str(row[3])  # –ö–æ—Ä–ø—É—Å

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç–≤–µ—Ç–∞
                response_lines.append(f"–í—Ä–µ–º—è: {time}, –ê—É–¥–∏—Ç–æ—Ä–∏—è: {audience_number}, –ö–æ—Ä–ø—É—Å: {building}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"–ì—Ä—É–ø–ø–∞: {group_number}\n" + "\n".join(response_lines)
            bot.send_message(chat_id, response)
        else:
            bot.send_message(chat_id, f"–£ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã {group_number} —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ.\n–ü–æ–ø—Ä–æ–±—É–π –≤ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å.")
    else:
        bot.send_message(chat_id, "–¢–≤–æ—ë –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    data = call.data
    chat_id = call.message.chat.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    if data.startswith('group_'):
        group = data.split('_')[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
        user_group_choice[chat_id] = group  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É

        bot.answer_callback_query(call.id, f"–¢–≤–æ—è –≥—Ä—É–ø–ø–∞ 24–ö–ù–¢-{group}.")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        send_schedule_options(chat_id, group)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é
    elif data.startswith('week_timetable_'):
        parts = data.split('_')
        group = parts[-1]  # –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
        filename = f'week_timetable_{group}.jpg'  # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        group_folder = f'24CST-{group}'
        filepath = os.path.join('timetables', group_folder, filename)

        try:
            with open(filepath, 'rb') as image:
                text = f"–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –≥—Ä—É–ø–ø—ã 24–ö–ù–¢-{group}."
                bot.send_message(chat_id, text)
                bot.send_photo(chat_id, image)
        except FileNotFoundError:
            bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏, —Ç–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–æ.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
    elif data.startswith('today_timetable_') or data.startswith('tomorrow_timetable_'):
        parts = data.split('_')
        timetable_type = parts[0]  # 'today' –∏–ª–∏ 'tomorrow'
        group = parts[-1]  # –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        if timetable_type == 'today':
            target_date = datetime.now()
        elif timetable_type == 'tomorrow':
            target_date = datetime.now() + timedelta(days=1)

        day_en = get_day_name_en(target_date) 
        day_ru = get_day_name_ru(target_date) 

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–∞–¥–∞–µ—Ç –ª–∏ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –Ω–∞ —á–µ—Ç–≤–µ—Ä–≥ –∏–ª–∏ —Å—É–±–±–æ—Ç—É
        if timetable_type == 'tomorrow' and target_date.weekday() in [3, 5]:  # –ß–µ—Ç–≤–µ—Ä–≥ = 3, –°—É–±–±–æ—Ç–∞ = 5
            bot.send_message(chat_id, "–ó–∞–≤—Ç—Ä–∞ —É —Ç–µ–±—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ) (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")
            user_states[chat_id] = 'awaiting_name'
            return

        # –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏:
        day_display = day_ru[:-1] + '—É' if day_ru == '—Å—Ä–µ–¥–∞' or day_ru == '–ø—è—Ç–Ω–∏—Ü–∞' else day_ru  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏

        filename = f'{day_en}_timetable_{group}.jpg'  # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É 
        group_folder = f'24CST-{group}'
        filepath = os.path.join('timetables', group_folder, filename)

        try:
            with open(filepath, 'rb') as image:
                text = f"–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_display} –¥–ª—è 24–ö–ù–¢-{group} –≥—Ä—É–ø–ø—ã."
                bot.send_message(chat_id, text)
                bot.send_photo(chat_id, image)
        except FileNotFoundError:
            bot.send_message(chat_id, f"–ò–∑–≤–∏–Ω–∏, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_display} –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–æ.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤
    elif data.startswith('deadline_'):
        if data == 'deadline_add_deadline':
            user_states[chat_id] = 'awaiting_deadline_name'
            bot.send_message(chat_id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞:")

        elif data == 'deadline_view_deadlines':
            deadlines = user_deadlines.get(str(chat_id), [])
            if not deadlines:
                bot.send_message(chat_id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤.")
            else:
                response = "üìã *–¢–≤–æ–∏ –¥–µ–¥–ª–∞–π–Ω—ã:*\n"
                markup = types.InlineKeyboardMarkup()
                for idx, deadline in enumerate(deadlines, 1):
                    response += f"{idx}. *{deadline['name']}* - {deadline['date']}\n"
                    edit_button = types.InlineKeyboardButton(f"‚úè –ò–∑–º–µ–Ω–∏—Ç—å {idx}", callback_data=f'deadline_edit_{idx-1}_name')
                    delete_button = types.InlineKeyboardButton(f"üóë –£–¥–∞–ª–∏—Ç—å {idx}", callback_data=f'deadline_delete_{idx-1}')
                    markup.add(edit_button, delete_button)
                bot.send_message(chat_id, response, parse_mode='Markdown', reply_markup=markup)

        elif data.startswith('deadline_edit_'):
            try:
                parts = data.split('_')
                idx = int(parts[2])
                if len(parts) > 3 and parts[3] == 'name':
                    user_states[chat_id] = f'editing_deadline_{idx}_name'
                    bot.send_message(chat_id, f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ #{idx+1}:")
                else:
                    bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
            except ValueError:
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        
        elif data.startswith('deadline_delete_'):
            try:
                idx = int(data.split('_')[-1])
                deadlines = user_deadlines.get(str(chat_id), [])
                if 0 <= idx < len(deadlines):
                    deleted = deadlines.pop(idx)
                    user_deadlines[str(chat_id)] = deadlines
                    save_deadlines()
                    bot.send_message(chat_id, f"‚úÖ –î–µ–¥–ª–∞–π–Ω *'{deleted['name']}'* —É–¥–∞–ª—ë–Ω.", parse_mode='Markdown')
                else:
                    bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–µ–¥–ª–∞–π–Ω–∞.")
            except ValueError:
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")

    bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞
@bot.message_handler(func=lambda message: True)
def handle_deadline_input(message):
    chat_id = message.chat.id
    state = user_states.get(chat_id, '')

    if state == 'awaiting_deadline_name':
        deadline_name = message.text.strip()
        if not deadline_name:
            bot.send_message(chat_id, "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ–º –¥–∞—Ç—É
        user_deadlines.setdefault(str(chat_id), []).append({'name': deadline_name, 'date': ''})
        user_states[chat_id] = 'awaiting_deadline_date'
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–µ–Ω—å.–ú–µ—Å—è—Ü.–ì–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2024):")
    
    elif state == 'awaiting_deadline_date':
        deadline_date_input = message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        try:
            deadline_date = datetime.strptime(message.text, '%d.%m.%Y').date()
            deadline_date_str = deadline_date.strftime('%d.%m.%Y')

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ—Å—Ç—å
            if deadline_date < datetime.now().date():
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
                return
        except ValueError:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–µ–Ω—å.–ú–µ—Å—è—Ü.–ì–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2024):")
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω
        deadlines = user_deadlines.get(str(chat_id), [])
        if deadlines and deadlines[-1]['date'] == '':
            deadlines[-1]['date'] = deadline_date_str
            user_deadlines[str(chat_id)] = deadlines
            save_deadlines()
            bot.send_message(chat_id, f"‚úÖ –î–µ–¥–ª–∞–π–Ω *'{deadlines[-1]['name']}'* —Å –¥–∞—Ç–æ–π *{deadline_date_str}* –¥–æ–±–∞–≤–ª–µ–Ω.", parse_mode='Markdown')
            user_states.pop(chat_id, None)
        else:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞.")
            user_states.pop(chat_id, None)
    
    elif state.startswith('editing_deadline_'):
        try:
            parts = state.split('_')
            if len(parts) == 4 and parts[2].isdigit() and parts[3] == 'name':
                idx = int(parts[2])
                new_name = message.text.strip()
                if not new_name:
                    bot.send_message(chat_id, "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
                    return
                deadlines = user_deadlines.get(str(chat_id), [])
                if 0 <= idx < len(deadlines):
                    old_name = deadlines[idx]['name']
                    deadlines[idx]['name'] = new_name
                    user_deadlines[str(chat_id)] = deadlines
                    bot.send_message(chat_id, f"‚úÖ –î–µ–¥–ª–∞–π–Ω #{idx+1} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω —Å *'{old_name}'* –Ω–∞ *'{new_name}'*.", parse_mode='Markdown')
                    user_states[chat_id] = f'editing_deadline_{idx}_date'
                    bot.send_message(chat_id, f"–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ #{idx+1} –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–µ–Ω—å.–ú–µ—Å—è—Ü.–ì–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2024):")
                else:
                    bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–µ–¥–ª–∞–π–Ω–∞.")

            elif len(parts) == 4 and parts[2].isdigit() and parts[3] == 'date':
                idx = int(parts[2])
                new_date_input = message.text.strip()
                try:
                    new_date = datetime.strptime(new_date_input, '%d.%m.%Y').date()
                    new_date_str = new_date.strftime('%d.%m.%Y')
                except ValueError:
                    bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–µ–Ω—å.–ú–µ—Å—è—Ü.–ì–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2024):")
                    return
                deadlines = user_deadlines.get(str(chat_id), [])
                if 0 <= idx < len(deadlines):
                    old_date = deadlines[idx]['date']
                    deadlines[idx]['date'] = new_date_str
                    user_deadlines[str(chat_id)] = deadlines
                    save_deadlines()
                    bot.send_message(chat_id, f"‚úÖ –î–µ–¥–ª–∞–π–Ω #{idx+1} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω:\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* {deadlines[idx]['name']}\n*–î–∞—Ç–∞:* {new_date_str}", parse_mode='Markdown')
                else:
                    bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–µ–¥–ª–∞–π–Ω–∞.")

                user_states.pop(chat_id, None)
            else:
                bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
        except Exception as e:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
            user_states.pop(chat_id, None)
        except ValueError:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
            user_states.pop(chat_id, None)
    
bot.infinity_polling()